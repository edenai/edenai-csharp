/* 
 * Eden AI API Documentation
 *
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png) # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EdenAI.Client;
using EdenAI.Model;

namespace EdenAI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOCRApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 Ocr (System.IO.Stream files, string providers, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> OcrWithHttpInfo (System.IO.Stream files, string providers, string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 OcrInvoice (System.IO.Stream files, string providers, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> OcrInvoiceWithHttpInfo (System.IO.Stream files, string providers, string language);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> OcrAsync (System.IO.Stream files, string providers, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> OcrAsyncWithHttpInfo (System.IO.Stream files, string providers, string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> OcrInvoiceAsync (System.IO.Stream files, string providers, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> OcrInvoiceAsyncWithHttpInfo (System.IO.Stream files, string providers, string language);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OCRApi : IOCRApi
    {
        private EdenAI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OCRApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OCRApi(String basePath)
        {
            this.Configuration = new EdenAI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OCRApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OCRApi(EdenAI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdenAI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdenAI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdenAI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 Ocr (System.IO.Stream files, string providers, string language)
        {
             ApiResponse<InlineResponse2001> localVarResponse = OcrWithHttpInfo(files, providers, language);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > OcrWithHttpInfo (System.IO.Stream files, string providers, string language)
        {
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling OCRApi->Ocr");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling OCRApi->Ocr");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling OCRApi->Ocr");

            var localVarPath = "/pretrained/ocr/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ocr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        ///  Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> OcrAsync (System.IO.Stream files, string providers, string language)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await OcrAsyncWithHttpInfo(files, providers, language);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Optical Character Recognition or optical character reader (OCR) is the electronic or mechanical conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese - Simplified**|&#x60;string&#x60;|&#x60;zh-CN&#x60;| |**Chinese - Traditional**|&#x60;string&#x60;|&#x60;zh-TW&#x60;| |**Czech**|&#x60;string&#x60;|&#x60;cz-CZ&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**Finnish**|&#x60;string&#x60;|&#x60;fn-FN&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Greek**|&#x60;string&#x60;|&#x60;gr-GR&#x60;| |**Hungarian**|&#x60;string&#x60;|&#x60;hu-HU&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Polish**|&#x60;string&#x60;|&#x60;pl-PO&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Swedish**|&#x60;string&#x60;|&#x60;sw-SW&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-vision-(ocr))|&#x60;google&#x60;|&#x60;v1&#x60;| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v3.2&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-textract)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File to analyse (ex: pdf, jpg, jpeg, png, tiff)</param>
        /// <param name="providers">Providers to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;, &#39;google&#39;])</param>
        /// <param name="language">Language code expected (ex: fr-FR)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> OcrAsyncWithHttpInfo (System.IO.Stream files, string providers, string language)
        {
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling OCRApi->Ocr");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling OCRApi->Ocr");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling OCRApi->Ocr");

            var localVarPath = "/pretrained/ocr/ocr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Ocr", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        ///  The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 OcrInvoice (System.IO.Stream files, string providers, string language)
        {
             ApiResponse<InlineResponse2002> localVarResponse = OcrInvoiceWithHttpInfo(files, providers, language);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > OcrInvoiceWithHttpInfo (System.IO.Stream files, string providers, string language)
        {
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling OCRApi->OcrInvoice");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling OCRApi->OcrInvoice");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling OCRApi->OcrInvoice");

            var localVarPath = "/pretrained/ocr/ocr_invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OcrInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        ///  The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> OcrInvoiceAsync (System.IO.Stream files, string providers, string language)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await OcrInvoiceAsyncWithHttpInfo(files, providers, language);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  The OCR Invoice API enables customers to take invoices in a variety of formats and return structured data to automate the invoice processing.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English(US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-computer-vision-(ocr))|&#x60;microsoft&#x60;|&#x60;v2.1-preview.3&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="files">File Image to analyse (ex: pdf, jpg, jpeg, png)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;mindee&#39;, &#39;microsoft&#39;])</param>
        /// <param name="language">Language code of invoice (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> OcrInvoiceAsyncWithHttpInfo (System.IO.Stream files, string providers, string language)
        {
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling OCRApi->OcrInvoice");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling OCRApi->OcrInvoice");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling OCRApi->OcrInvoice");

            var localVarPath = "/pretrained/ocr/ocr_invoice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OcrInvoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

    }
}
