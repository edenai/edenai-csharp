/* 
 * Eden AI API Documentation
 *
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png) # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EdenAI.Client;
using EdenAI.Model;

namespace EdenAI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISpeechApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns></returns>
        void AsynchronousSpeechRecognition (string language, System.IO.Stream files, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AsynchronousSpeechRecognitionWithHttpInfo (string language, System.IO.Stream files, string providers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        void AsynchronousSpeechRecognition_0 (string jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AsynchronousSpeechRecognition_0WithHttpInfo (string jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 SpeechRecognition (string language, System.IO.Stream files, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> SpeechRecognitionWithHttpInfo (string language, System.IO.Stream files, string providers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>InlineResponse2011</returns>
        InlineResponse2011 TextToSpeech (string text, string language, string option, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        ApiResponse<InlineResponse2011> TextToSpeechWithHttpInfo (string text, string language, string option, string providers);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AsynchronousSpeechRecognitionAsync (string language, System.IO.Stream files, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AsynchronousSpeechRecognitionAsyncWithHttpInfo (string language, System.IO.Stream files, string providers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AsynchronousSpeechRecognition_0Async (string jobId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AsynchronousSpeechRecognition_0AsyncWithHttpInfo (string jobId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> SpeechRecognitionAsync (string language, System.IO.Stream files, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> SpeechRecognitionAsyncWithHttpInfo (string language, System.IO.Stream files, string providers);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>Task of InlineResponse2011</returns>
        System.Threading.Tasks.Task<InlineResponse2011> TextToSpeechAsync (string text, string language, string option, string providers);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> TextToSpeechAsyncWithHttpInfo (string text, string language, string option, string providers);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SpeechApi : ISpeechApi
    {
        private EdenAI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpeechApi(String basePath)
        {
            this.Configuration = new EdenAI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpeechApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpeechApi(EdenAI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdenAI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdenAI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdenAI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns></returns>
        public void AsynchronousSpeechRecognition (string language, System.IO.Stream files, string providers)
        {
             AsynchronousSpeechRecognitionWithHttpInfo(language, files, providers);
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AsynchronousSpeechRecognitionWithHttpInfo (string language, System.IO.Stream files, string providers)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->AsynchronousSpeechRecognition");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling SpeechApi->AsynchronousSpeechRecognition");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->AsynchronousSpeechRecognition");

            var localVarPath = "/pretrained/audio/speech_recognition_async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AsynchronousSpeechRecognition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AsynchronousSpeechRecognitionAsync (string language, System.IO.Stream files, string providers)
        {
             await AsynchronousSpeechRecognitionAsyncWithHttpInfo(language, files, providers);

        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text. This endpoint allows you to launch asynchronous speech recognition jobs.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AsynchronousSpeechRecognitionAsyncWithHttpInfo (string language, System.IO.Stream files, string providers)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->AsynchronousSpeechRecognition");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling SpeechApi->AsynchronousSpeechRecognition");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->AsynchronousSpeechRecognition");

            var localVarPath = "/pretrained/audio/speech_recognition_async";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AsynchronousSpeechRecognition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns></returns>
        public void AsynchronousSpeechRecognition_0 (string jobId)
        {
             AsynchronousSpeechRecognition_0WithHttpInfo(jobId);
        }

        /// <summary>
        ///  This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AsynchronousSpeechRecognition_0WithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling SpeechApi->AsynchronousSpeechRecognition_0");

            var localVarPath = "/pretrained/audio/speech_recognition_async/{job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AsynchronousSpeechRecognition_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AsynchronousSpeechRecognition_0Async (string jobId)
        {
             await AsynchronousSpeechRecognition_0AsyncWithHttpInfo(jobId);

        }

        /// <summary>
        ///  This endpoint allows you to check the state of  your asynchronous speech recognition job and returns the results when they are ready.
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AsynchronousSpeechRecognition_0AsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling SpeechApi->AsynchronousSpeechRecognition_0");

            var localVarPath = "/pretrained/audio/speech_recognition_async/{job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AsynchronousSpeechRecognition_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 SpeechRecognition (string language, System.IO.Stream files, string providers)
        {
             ApiResponse<InlineResponse201> localVarResponse = SpeechRecognitionWithHttpInfo(language, files, providers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse< InlineResponse201 > SpeechRecognitionWithHttpInfo (string language, System.IO.Stream files, string providers)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->SpeechRecognition");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling SpeechApi->SpeechRecognition");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->SpeechRecognition");

            var localVarPath = "/pretrained/audio/speech_recognition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeechRecognition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> SpeechRecognitionAsync (string language, System.IO.Stream files, string providers)
        {
             ApiResponse<InlineResponse201> localVarResponse = await SpeechRecognitionAsyncWithHttpInfo(language, files, providers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Speech recognition is technology that can recognize spoken words, which can then be converted to text.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (GB)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**French**|&#x60;string&#x60;|&#x60;fr-FR&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;| |**Dutch (Netherlands)**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Arabic**|&#x60;string&#x60;|&#x60;ar-SA&#x60;| |**Italian**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Korean**|&#x60;string&#x60;|&#x60;ko-KR&#x60;| |**Portuguese**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Turkish**|&#x60;string&#x60;|&#x60;tr-TR&#x60;| |**Indonesian**|&#x60;string&#x60;|&#x60;id-ID&#x60;| |**Malay**|&#x60;string&#x60;|&#x60;ms-MY&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-speech-to-text)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-transcribe)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-speech-to-text)|&#x60;google&#x60;|&#x60;v1p1beta1&#x60;| |[**Deepgram**](https://www.edenai.co/catalog/deepgram)|&#x60;deepgram&#x60;|&#x60;v1&#x60;| |[**Assembly**](https://www.edenai.co/catalog/assembly-ai)|&#x60;assembly&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish), nl-NL Dutch (Netherlands))</param>
        /// <param name="files">File to analyse (ex: mp3, wav, m4a)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;, &#39;threescribe])</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> SpeechRecognitionAsyncWithHttpInfo (string language, System.IO.Stream files, string providers)
        {
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->SpeechRecognition");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling SpeechApi->SpeechRecognition");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->SpeechRecognition");

            var localVarPath = "/pretrained/audio/speech_recognition";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SpeechRecognition", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        ///  Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>InlineResponse2011</returns>
        public InlineResponse2011 TextToSpeech (string text, string language, string option, string providers)
        {
             ApiResponse<InlineResponse2011> localVarResponse = TextToSpeechWithHttpInfo(text, language, option, providers);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>ApiResponse of InlineResponse2011</returns>
        public ApiResponse< InlineResponse2011 > TextToSpeechWithHttpInfo (string text, string language, string option, string providers)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->TextToSpeech");

            var localVarPath = "/pretrained/audio/text_to_speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (option != null) localVarFormParams.Add("option", this.Configuration.ApiClient.ParameterToString(option)); // form parameter
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextToSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2011)));
        }

        /// <summary>
        ///  Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>Task of InlineResponse2011</returns>
        public async System.Threading.Tasks.Task<InlineResponse2011> TextToSpeechAsync (string text, string language, string option, string providers)
        {
             ApiResponse<InlineResponse2011> localVarResponse = await TextToSpeechAsyncWithHttpInfo(text, language, option, providers);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Text-to-speech (TTS) system converts normal language text into speech.  **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -|- -- -|- -- --| |**Arabic**|&#x60;string&#x60;|&#x60;ar-XA&#x60;| |**Chinese**|&#x60;string&#x60;|&#x60;cmn-CN&#x60;| |**Danish**|&#x60;string&#x60;|&#x60;da-DK&#x60;| |**Dutch**|&#x60;string&#x60;|&#x60;nl-NL&#x60;| |**English (US)**|&#x60;string&#x60;|&#x60;en-US&#x60;| |**English (UK)**|&#x60;string&#x60;|&#x60;en-GB&#x60;| |**German**|&#x60;string&#x60;|&#x60;de-DE&#x60;| |**Italy**|&#x60;string&#x60;|&#x60;it-IT&#x60;| |**Japanese**|&#x60;string&#x60;|&#x60;ja-JP&#x60;| |**Portuguese (Brazil)**|&#x60;string&#x60;|&#x60;pt-BR&#x60;| |**Portuguese (Portugal)**|&#x60;string&#x60;|&#x60;pt-PT&#x60;| |**Russian**|&#x60;string&#x60;|&#x60;ru-RU&#x60;| |**Spanish**|&#x60;string&#x60;|&#x60;es-ES&#x60;|  **AVAILABLE PROVIDERS**   |Name|Value|Version| |- -- -|- -- --|- -- -- --| |[**Microsoft Azure**](https://www.edenai.co/catalog/azure-text-to-speech)|&#x60;microsoft&#x60;|&#x60;v1.0&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-polly)|&#x60;amazon&#x60;|&#x60;boto3 (v1.15.18)&#x60;| |[**Google Cloud**](https://www.edenai.co/catalog/google-cloud-text-to-speech)|&#x60;google&#x60;|&#x60;v1&#x60;|
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">Text to transform</param>
        /// <param name="language">Language code expected (ex: fr-FR (French), en-US (English), es-ES (Spanish))</param>
        /// <param name="option">Voice gender selected (ex: FEMALE ou MALE)</param>
        /// <param name="providers">Provider to compare (ex: [ &#39;amazon&#39;, &#39;microsoft&#39;, &#39;ibm&#39;,&#39;google&#39;])</param>
        /// <returns>Task of ApiResponse (InlineResponse2011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2011>> TextToSpeechAsyncWithHttpInfo (string text, string language, string option, string providers)
        {
            // verify the required parameter 'text' is set
            if (text == null)
                throw new ApiException(400, "Missing required parameter 'text' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'option' is set
            if (option == null)
                throw new ApiException(400, "Missing required parameter 'option' when calling SpeechApi->TextToSpeech");
            // verify the required parameter 'providers' is set
            if (providers == null)
                throw new ApiException(400, "Missing required parameter 'providers' when calling SpeechApi->TextToSpeech");

            var localVarPath = "/pretrained/audio/text_to_speech";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (text != null) localVarFormParams.Add("text", this.Configuration.ApiClient.ParameterToString(text)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (option != null) localVarFormParams.Add("option", this.Configuration.ApiClient.ParameterToString(option)); // form parameter
            if (providers != null) localVarFormParams.Add("providers", this.Configuration.ApiClient.ParameterToString(providers)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TextToSpeech", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2011)));
        }

    }
}
