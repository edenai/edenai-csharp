/* 
 * Eden AI API Documentation
 *
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png) # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using EdenAI.Client;

namespace EdenAI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutoMLTextDataApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        void AutoMLTextDataDelete (string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataDeleteWithHttpInfo (string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns></returns>
        void AutoMLTextDataLaunchPrediction (string projectId, string trainId, System.IO.Stream files);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataLaunchPredictionWithHttpInfo (string projectId, string trainId, System.IO.Stream files);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        void AutoMLTextDataPredictionDetail (string predictId, string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataPredictionDetailWithHttpInfo (string predictId, string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        void AutoMLTextDataPredictionResults (string predictId, string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataPredictionResultsWithHttpInfo (string predictId, string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns></returns>
        void AutoMLTextDataTrain (string projectId, string provider, string trainingName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataTrainWithHttpInfo (string projectId, string provider, string trainingName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Train Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        void AutoMLTextDataTrainDetail (string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Train Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextDataTrainDetailWithHttpInfo (string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        void AutoMLTextProjectCreate (string projectName, string projectDescription, System.IO.Stream files, string type, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextProjectCreateWithHttpInfo (string projectName, string projectDescription, System.IO.Stream files, string type, string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void AutoMLTextProjectDelete (string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextProjectDeleteWithHttpInfo (string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        void AutoMLTextProjectDetail (string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextProjectDetailWithHttpInfo (string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project List
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void AutoMLTextProjectList ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project List
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextProjectListWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Update
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        void AutoMLTextProjectUpdate (string projectId, string projectName, string projectDescription, string type, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Update
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutoMLTextProjectUpdateWithHttpInfo (string projectId, string projectName, string projectDescription, string type, string language);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataDeleteAsync (string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataDeleteAsyncWithHttpInfo (string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataLaunchPredictionAsync (string projectId, string trainId, System.IO.Stream files);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataLaunchPredictionAsyncWithHttpInfo (string projectId, string trainId, System.IO.Stream files);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataPredictionDetailAsync (string predictId, string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataPredictionDetailAsyncWithHttpInfo (string predictId, string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataPredictionResultsAsync (string predictId, string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataPredictionResultsAsyncWithHttpInfo (string predictId, string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataTrainAsync (string projectId, string provider, string trainingName);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataTrainAsyncWithHttpInfo (string projectId, string provider, string trainingName);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Train Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextDataTrainDetailAsync (string projectId, string trainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Data Train Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataTrainDetailAsyncWithHttpInfo (string projectId, string trainId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextProjectCreateAsync (string projectName, string projectDescription, System.IO.Stream files, string type, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        ///   **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectCreateAsyncWithHttpInfo (string projectName, string projectDescription, System.IO.Stream files, string type, string language);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextProjectDeleteAsync (string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Delete
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectDeleteAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextProjectDetailAsync (string projectId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Detail
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectDetailAsyncWithHttpInfo (string projectId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project List
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextProjectListAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project List
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectListAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Update
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutoMLTextProjectUpdateAsync (string projectId, string projectName, string projectDescription, string type, string language);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// AutoML Text Project Update
        /// </remarks>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectUpdateAsyncWithHttpInfo (string projectId, string projectName, string projectDescription, string type, string language);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutoMLTextDataApi : IAutoMLTextDataApi
    {
        private EdenAI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoMLTextDataApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutoMLTextDataApi(String basePath)
        {
            this.Configuration = new EdenAI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoMLTextDataApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutoMLTextDataApi(EdenAI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = EdenAI.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = EdenAI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdenAI.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdenAI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  AutoML Text Data Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        public void AutoMLTextDataDelete (string projectId, string trainId)
        {
             AutoMLTextDataDeleteWithHttpInfo(projectId, trainId);
        }

        /// <summary>
        ///  AutoML Text Data Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataDeleteWithHttpInfo (string projectId, string trainId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataDelete");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataDelete");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Data Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataDeleteAsync (string projectId, string trainId)
        {
             await AutoMLTextDataDeleteAsyncWithHttpInfo(projectId, trainId);

        }

        /// <summary>
        ///  AutoML Text Data Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataDeleteAsyncWithHttpInfo (string projectId, string trainId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataDelete");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataDelete");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns></returns>
        public void AutoMLTextDataLaunchPrediction (string projectId, string trainId, System.IO.Stream files)
        {
             AutoMLTextDataLaunchPredictionWithHttpInfo(projectId, trainId, files);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataLaunchPredictionWithHttpInfo (string projectId, string trainId, System.IO.Stream files)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataLaunchPrediction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataLaunchPredictionAsync (string projectId, string trainId, System.IO.Stream files)
        {
             await AutoMLTextDataLaunchPredictionAsyncWithHttpInfo(projectId, trainId, files);

        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <param name="files"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataLaunchPredictionAsyncWithHttpInfo (string projectId, string trainId, System.IO.Stream files)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling AutoMLTextDataApi->AutoMLTextDataLaunchPrediction");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataLaunchPrediction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        public void AutoMLTextDataPredictionDetail (string predictId, string projectId, string trainId)
        {
             AutoMLTextDataPredictionDetailWithHttpInfo(predictId, projectId, trainId);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataPredictionDetailWithHttpInfo (string predictId, string projectId, string trainId)
        {
            // verify the required parameter 'predictId' is set
            if (predictId == null)
                throw new ApiException(400, "Missing required parameter 'predictId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictId != null) localVarPathParams.Add("predict_id", this.Configuration.ApiClient.ParameterToString(predictId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataPredictionDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataPredictionDetailAsync (string predictId, string projectId, string trainId)
        {
             await AutoMLTextDataPredictionDetailAsyncWithHttpInfo(predictId, projectId, trainId);

        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataPredictionDetailAsyncWithHttpInfo (string predictId, string projectId, string trainId)
        {
            // verify the required parameter 'predictId' is set
            if (predictId == null)
                throw new ApiException(400, "Missing required parameter 'predictId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionDetail");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictId != null) localVarPathParams.Add("predict_id", this.Configuration.ApiClient.ParameterToString(predictId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataPredictionDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        public void AutoMLTextDataPredictionResults (string predictId, string projectId, string trainId)
        {
             AutoMLTextDataPredictionResultsWithHttpInfo(predictId, projectId, trainId);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataPredictionResultsWithHttpInfo (string predictId, string projectId, string trainId)
        {
            // verify the required parameter 'predictId' is set
            if (predictId == null)
                throw new ApiException(400, "Missing required parameter 'predictId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictId != null) localVarPathParams.Add("predict_id", this.Configuration.ApiClient.ParameterToString(predictId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataPredictionResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataPredictionResultsAsync (string predictId, string projectId, string trainId)
        {
             await AutoMLTextDataPredictionResultsAsyncWithHttpInfo(predictId, projectId, trainId);

        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes a csv file with no header and only one column, where each line contains a document to classify.  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="predictId"></param>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataPredictionResultsAsyncWithHttpInfo (string predictId, string projectId, string trainId)
        {
            // verify the required parameter 'predictId' is set
            if (predictId == null)
                throw new ApiException(400, "Missing required parameter 'predictId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataPredictionResults");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}/prediction/{predict_id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (predictId != null) localVarPathParams.Add("predict_id", this.Configuration.ApiClient.ParameterToString(predictId)); // path parameter
            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataPredictionResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns></returns>
        public void AutoMLTextDataTrain (string projectId, string provider, string trainingName)
        {
             AutoMLTextDataTrainWithHttpInfo(projectId, provider, trainingName);
        }

        /// <summary>
        ///    **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataTrainWithHttpInfo (string projectId, string provider, string trainingName)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataTrain");
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling AutoMLTextDataApi->AutoMLTextDataTrain");
            // verify the required parameter 'trainingName' is set
            if (trainingName == null)
                throw new ApiException(400, "Missing required parameter 'trainingName' when calling AutoMLTextDataApi->AutoMLTextDataTrain");

            var localVarPath = "/automl/text/project/{project_id}/train";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (trainingName != null) localVarFormParams.Add("training_name", this.Configuration.ApiClient.ParameterToString(trainingName)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataTrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataTrainAsync (string projectId, string provider, string trainingName)
        {
             await AutoMLTextDataTrainAsyncWithHttpInfo(projectId, provider, trainingName);

        }

        /// <summary>
        ///    **AVAILABLE PROVIDERS**  |Name|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| |[**Google Cloud Services**](https://www.edenai.co/catalog/google-cloud-natural-language)|&#x60;google&#x60;| |[**Amazon Web Services**](https://www.edenai.co/catalog/amazon-comprehend)|&#x60;amazon&#x60;|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="provider"></param>
        /// <param name="trainingName"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataTrainAsyncWithHttpInfo (string projectId, string provider, string trainingName)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataTrain");
            // verify the required parameter 'provider' is set
            if (provider == null)
                throw new ApiException(400, "Missing required parameter 'provider' when calling AutoMLTextDataApi->AutoMLTextDataTrain");
            // verify the required parameter 'trainingName' is set
            if (trainingName == null)
                throw new ApiException(400, "Missing required parameter 'trainingName' when calling AutoMLTextDataApi->AutoMLTextDataTrain");

            var localVarPath = "/automl/text/project/{project_id}/train";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (trainingName != null) localVarFormParams.Add("training_name", this.Configuration.ApiClient.ParameterToString(trainingName)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataTrain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Data Train Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns></returns>
        public void AutoMLTextDataTrainDetail (string projectId, string trainId)
        {
             AutoMLTextDataTrainDetailWithHttpInfo(projectId, trainId);
        }

        /// <summary>
        ///  AutoML Text Data Train Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextDataTrainDetailWithHttpInfo (string projectId, string trainId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataTrainDetail");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataTrainDetail");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataTrainDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Data Train Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextDataTrainDetailAsync (string projectId, string trainId)
        {
             await AutoMLTextDataTrainDetailAsyncWithHttpInfo(projectId, trainId);

        }

        /// <summary>
        ///  AutoML Text Data Train Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="trainId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextDataTrainDetailAsyncWithHttpInfo (string projectId, string trainId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextDataTrainDetail");
            // verify the required parameter 'trainId' is set
            if (trainId == null)
                throw new ApiException(400, "Missing required parameter 'trainId' when calling AutoMLTextDataApi->AutoMLTextDataTrainDetail");

            var localVarPath = "/automl/text/project/{project_id}/train/{train_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (trainId != null) localVarPathParams.Add("train_id", this.Configuration.ApiClient.ParameterToString(trainId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextDataTrainDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        public void AutoMLTextProjectCreate (string projectName, string projectDescription, System.IO.Stream files, string type, string language)
        {
             AutoMLTextProjectCreateWithHttpInfo(projectName, projectDescription, files, type, language);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextProjectCreateWithHttpInfo (string projectName, string projectDescription, System.IO.Stream files, string type, string language)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'projectDescription' is set
            if (projectDescription == null)
                throw new ApiException(400, "Missing required parameter 'projectDescription' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");

            var localVarPath = "/automl/text/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarFormParams.Add("project_name", this.Configuration.ApiClient.ParameterToString(projectName)); // form parameter
            if (projectDescription != null) localVarFormParams.Add("project_description", this.Configuration.ApiClient.ParameterToString(projectDescription)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextProjectCreateAsync (string projectName, string projectDescription, System.IO.Stream files, string type, string language)
        {
             await AutoMLTextProjectCreateAsyncWithHttpInfo(projectName, projectDescription, files, type, language);

        }

        /// <summary>
        ///    **SUPPORTED FILES**  The API takes csv files separated using &#39;,&#39;. The csv must contain a header and exactly two columns, named &#x60;docs&#x60; and &#x60;labels&#x60; In case a document might have several labels, please separate your labels using &#39;|&#39;     **SUPPORTED LANGUAGE**  |Name|Type|Value| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **English (US)**|*&#x60;string&#x60;*|&#x60;en&#x60;| | **French**      |*&#x60;string&#x60;*|&#x60;fr&#x60;| | **German**      |*&#x60;string&#x60;*|&#x60;de&#x60;| | **Italian**     |*&#x60;string&#x60;*|&#x60;it&#x60;| | **Portuguese**  |*&#x60;string&#x60;*|&#x60;pt&#x60;| | **Arabic**      |*&#x60;string&#x60;*|&#x60;ar&#x60;| | **Chinese-Simplified**|*&#x60;string&#x60;*|&#x60;zh&#x60;| | **Chinese-Traditional**|*&#x60;string&#x60;*|&#x60;zh-TW&#x60;| | **Korean**      |*&#x60;string&#x60;*|&#x60;ko&#x60;| | **Japanese**    |*&#x60;string&#x60;*|&#x60;ja&#x60;| | **Hindi**       |*&#x60;string&#x60;*|&#x60;hi&#x60;| | **Spanish**     |*&#x60;string&#x60;*|&#x60;es&#x60;|    **AVAILABLE CLASSIFICATION TYPES**  |Type|Value|Description| |- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --|- -- -- -- -- -- -- --| | **Single Label Classification **|&#x60;single_label_classification&#x60;|Each document belongs to one category (label)| | **Multi Label Classification**|&#x60;multi_label_classification&#x60;|Documents might have several labels|  
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="files"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectCreateAsyncWithHttpInfo (string projectName, string projectDescription, System.IO.Stream files, string type, string language)
        {
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'projectDescription' is set
            if (projectDescription == null)
                throw new ApiException(400, "Missing required parameter 'projectDescription' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'files' is set
            if (files == null)
                throw new ApiException(400, "Missing required parameter 'files' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AutoMLTextDataApi->AutoMLTextProjectCreate");

            var localVarPath = "/automl/text/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectName != null) localVarFormParams.Add("project_name", this.Configuration.ApiClient.ParameterToString(projectName)); // form parameter
            if (projectDescription != null) localVarFormParams.Add("project_description", this.Configuration.ApiClient.ParameterToString(projectDescription)); // form parameter
            if (files != null) localVarFileParams.Add("files", this.Configuration.ApiClient.ParameterToFile("files", files));
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void AutoMLTextProjectDelete (string projectId)
        {
             AutoMLTextProjectDeleteWithHttpInfo(projectId);
        }

        /// <summary>
        ///  AutoML Text Project Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextProjectDeleteWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectDelete");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextProjectDeleteAsync (string projectId)
        {
             await AutoMLTextProjectDeleteAsyncWithHttpInfo(projectId);

        }

        /// <summary>
        ///  AutoML Text Project Delete
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectDeleteAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectDelete");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns></returns>
        public void AutoMLTextProjectDetail (string projectId)
        {
             AutoMLTextProjectDetailWithHttpInfo(projectId);
        }

        /// <summary>
        ///  AutoML Text Project Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextProjectDetailWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectDetail");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextProjectDetailAsync (string projectId)
        {
             await AutoMLTextProjectDetailAsyncWithHttpInfo(projectId);

        }

        /// <summary>
        ///  AutoML Text Project Detail
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectDetailAsyncWithHttpInfo (string projectId)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectDetail");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectDetail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project List
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void AutoMLTextProjectList ()
        {
             AutoMLTextProjectListWithHttpInfo();
        }

        /// <summary>
        ///  AutoML Text Project List
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextProjectListWithHttpInfo ()
        {

            var localVarPath = "/automl/text/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project List
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextProjectListAsync ()
        {
             await AutoMLTextProjectListAsyncWithHttpInfo();

        }

        /// <summary>
        ///  AutoML Text Project List
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectListAsyncWithHttpInfo ()
        {

            var localVarPath = "/automl/text/project";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Update
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns></returns>
        public void AutoMLTextProjectUpdate (string projectId, string projectName, string projectDescription, string type, string language)
        {
             AutoMLTextProjectUpdateWithHttpInfo(projectId, projectName, projectDescription, type, language);
        }

        /// <summary>
        ///  AutoML Text Project Update
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutoMLTextProjectUpdateWithHttpInfo (string projectId, string projectName, string projectDescription, string type, string language)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'projectDescription' is set
            if (projectDescription == null)
                throw new ApiException(400, "Missing required parameter 'projectDescription' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectName != null) localVarFormParams.Add("project_name", this.Configuration.ApiClient.ParameterToString(projectName)); // form parameter
            if (projectDescription != null) localVarFormParams.Add("project_description", this.Configuration.ApiClient.ParameterToString(projectDescription)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  AutoML Text Project Update
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutoMLTextProjectUpdateAsync (string projectId, string projectName, string projectDescription, string type, string language)
        {
             await AutoMLTextProjectUpdateAsyncWithHttpInfo(projectId, projectName, projectDescription, type, language);

        }

        /// <summary>
        ///  AutoML Text Project Update
        /// </summary>
        /// <exception cref="EdenAI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="projectName"></param>
        /// <param name="projectDescription"></param>
        /// <param name="type"></param>
        /// <param name="language"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutoMLTextProjectUpdateAsyncWithHttpInfo (string projectId, string projectName, string projectDescription, string type, string language)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'projectName' is set
            if (projectName == null)
                throw new ApiException(400, "Missing required parameter 'projectName' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'projectDescription' is set
            if (projectDescription == null)
                throw new ApiException(400, "Missing required parameter 'projectDescription' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");
            // verify the required parameter 'language' is set
            if (language == null)
                throw new ApiException(400, "Missing required parameter 'language' when calling AutoMLTextDataApi->AutoMLTextProjectUpdate");

            var localVarPath = "/automl/text/project/{project_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectId != null) localVarPathParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // path parameter
            if (projectName != null) localVarFormParams.Add("project_name", this.Configuration.ApiClient.ParameterToString(projectName)); // form parameter
            if (projectDescription != null) localVarFormParams.Add("project_description", this.Configuration.ApiClient.ParameterToString(projectDescription)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AutoMLTextProjectUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
