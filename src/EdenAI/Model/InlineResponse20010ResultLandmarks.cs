/* 
 * Eden AI API Documentation
 *
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png) # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = EdenAI.Client.SwaggerDateConverter;

namespace EdenAI.Model
{
    /// <summary>
    /// object
    /// </summary>
    [DataContract]
    public partial class InlineResponse20010ResultLandmarks :  IEquatable<InlineResponse20010ResultLandmarks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse20010ResultLandmarks" /> class.
        /// </summary>
        /// <param name="lEFTEYE">lEFTEYE.</param>
        /// <param name="rIGHTEYE">rIGHTEYE.</param>
        /// <param name="lEFTOFLEFTEYEBROW">lEFTOFLEFTEYEBROW.</param>
        /// <param name="rIGHTOFLEFTEYEBROW">rIGHTOFLEFTEYEBROW.</param>
        /// <param name="lEFTOFRIGHTEYEBROW">lEFTOFRIGHTEYEBROW.</param>
        /// <param name="rIGHTOFRIGHTEYEBROW">rIGHTOFRIGHTEYEBROW.</param>
        /// <param name="mIDPOINTBETWEENEYES">mIDPOINTBETWEENEYES.</param>
        /// <param name="nOSETIP">nOSETIP.</param>
        /// <param name="uPPERLIP">uPPERLIP.</param>
        /// <param name="lOWERLIP">lOWERLIP.</param>
        /// <param name="mOUTHLEFT">mOUTHLEFT.</param>
        /// <param name="mOUTHRIGHT">mOUTHRIGHT.</param>
        /// <param name="mOUTHCENTER">mOUTHCENTER.</param>
        /// <param name="nOSEBOTTOMRIGHT">nOSEBOTTOMRIGHT.</param>
        /// <param name="nOSEBOTTOMLEFT">nOSEBOTTOMLEFT.</param>
        /// <param name="nOSEBOTTOMCENTER">nOSEBOTTOMCENTER.</param>
        /// <param name="lEFTEYETOPBOUNDARY">lEFTEYETOPBOUNDARY.</param>
        /// <param name="lEFTEYERIGHTCORNER">lEFTEYERIGHTCORNER.</param>
        /// <param name="lEFTEYEBOTTOMBOUNDARY">lEFTEYEBOTTOMBOUNDARY.</param>
        /// <param name="lEFTEYELEFTCORNER">lEFTEYELEFTCORNER.</param>
        /// <param name="rIGHTEYETOPBOUNDARY">rIGHTEYETOPBOUNDARY.</param>
        /// <param name="rIGHTEYERIGHTCORNER">rIGHTEYERIGHTCORNER.</param>
        /// <param name="rIGHTEYEBOTTOMBOUNDARY">rIGHTEYEBOTTOMBOUNDARY.</param>
        /// <param name="rIGHTEYELEFTCORNER">rIGHTEYELEFTCORNER.</param>
        /// <param name="lEFTEYEBROWUPPERMIDPOINT">lEFTEYEBROWUPPERMIDPOINT.</param>
        /// <param name="rIGHTEYEBROWUPPERMIDPOINT">rIGHTEYEBROWUPPERMIDPOINT.</param>
        /// <param name="lEFTEARTRAGION">lEFTEARTRAGION.</param>
        /// <param name="rIGHTEARTRAGION">rIGHTEARTRAGION.</param>
        /// <param name="fOREHEADGLABELLA">fOREHEADGLABELLA.</param>
        /// <param name="cHINGNATHION">cHINGNATHION.</param>
        /// <param name="cHINLEFTGONION">cHINLEFTGONION.</param>
        /// <param name="cHINRIGHTGONION">cHINRIGHTGONION.</param>
        /// <param name="lEFTCHEEKCENTER">lEFTCHEEKCENTER.</param>
        /// <param name="rIGHTCHEEKCENTER">rIGHTCHEEKCENTER.</param>
        public InlineResponse20010ResultLandmarks(List<decimal?> lEFTEYE = default(List<decimal?>), List<decimal?> rIGHTEYE = default(List<decimal?>), List<decimal?> lEFTOFLEFTEYEBROW = default(List<decimal?>), List<decimal?> rIGHTOFLEFTEYEBROW = default(List<decimal?>), List<decimal?> lEFTOFRIGHTEYEBROW = default(List<decimal?>), List<decimal?> rIGHTOFRIGHTEYEBROW = default(List<decimal?>), List<decimal?> mIDPOINTBETWEENEYES = default(List<decimal?>), List<decimal?> nOSETIP = default(List<decimal?>), List<decimal?> uPPERLIP = default(List<decimal?>), List<decimal?> lOWERLIP = default(List<decimal?>), List<decimal?> mOUTHLEFT = default(List<decimal?>), List<decimal?> mOUTHRIGHT = default(List<decimal?>), List<decimal?> mOUTHCENTER = default(List<decimal?>), List<decimal?> nOSEBOTTOMRIGHT = default(List<decimal?>), List<decimal?> nOSEBOTTOMLEFT = default(List<decimal?>), List<decimal?> nOSEBOTTOMCENTER = default(List<decimal?>), List<decimal?> lEFTEYETOPBOUNDARY = default(List<decimal?>), List<decimal?> lEFTEYERIGHTCORNER = default(List<decimal?>), List<decimal?> lEFTEYEBOTTOMBOUNDARY = default(List<decimal?>), List<decimal?> lEFTEYELEFTCORNER = default(List<decimal?>), List<decimal?> rIGHTEYETOPBOUNDARY = default(List<decimal?>), List<decimal?> rIGHTEYERIGHTCORNER = default(List<decimal?>), List<decimal?> rIGHTEYEBOTTOMBOUNDARY = default(List<decimal?>), List<decimal?> rIGHTEYELEFTCORNER = default(List<decimal?>), List<decimal?> lEFTEYEBROWUPPERMIDPOINT = default(List<decimal?>), List<decimal?> rIGHTEYEBROWUPPERMIDPOINT = default(List<decimal?>), List<decimal?> lEFTEARTRAGION = default(List<decimal?>), List<decimal?> rIGHTEARTRAGION = default(List<decimal?>), List<decimal?> fOREHEADGLABELLA = default(List<decimal?>), List<decimal?> cHINGNATHION = default(List<decimal?>), List<decimal?> cHINLEFTGONION = default(List<decimal?>), List<decimal?> cHINRIGHTGONION = default(List<decimal?>), List<decimal?> lEFTCHEEKCENTER = default(List<decimal?>), List<decimal?> rIGHTCHEEKCENTER = default(List<decimal?>))
        {
            this.LEFT_EYE = lEFTEYE;
            this.RIGHT_EYE = rIGHTEYE;
            this.LEFT_OF_LEFT_EYEBROW = lEFTOFLEFTEYEBROW;
            this.RIGHT_OF_LEFT_EYEBROW = rIGHTOFLEFTEYEBROW;
            this.LEFT_OF_RIGHT_EYEBROW = lEFTOFRIGHTEYEBROW;
            this.RIGHT_OF_RIGHT_EYEBROW = rIGHTOFRIGHTEYEBROW;
            this.MIDPOINT_BETWEEN_EYES = mIDPOINTBETWEENEYES;
            this.NOSE_TIP = nOSETIP;
            this.UPPER_LIP = uPPERLIP;
            this.LOWER_LIP = lOWERLIP;
            this.MOUTH_LEFT = mOUTHLEFT;
            this.MOUTH_RIGHT = mOUTHRIGHT;
            this.MOUTH_CENTER = mOUTHCENTER;
            this.NOSE_BOTTOM_RIGHT = nOSEBOTTOMRIGHT;
            this.NOSE_BOTTOM_LEFT = nOSEBOTTOMLEFT;
            this.NOSE_BOTTOM_CENTER = nOSEBOTTOMCENTER;
            this.LEFT_EYE_TOP_BOUNDARY = lEFTEYETOPBOUNDARY;
            this.LEFT_EYE_RIGHT_CORNER = lEFTEYERIGHTCORNER;
            this.LEFT_EYE_BOTTOM_BOUNDARY = lEFTEYEBOTTOMBOUNDARY;
            this.LEFT_EYE_LEFT_CORNER = lEFTEYELEFTCORNER;
            this.RIGHT_EYE_TOP_BOUNDARY = rIGHTEYETOPBOUNDARY;
            this.RIGHT_EYE_RIGHT_CORNER = rIGHTEYERIGHTCORNER;
            this.RIGHT_EYE_BOTTOM_BOUNDARY = rIGHTEYEBOTTOMBOUNDARY;
            this.RIGHT_EYE_LEFT_CORNER = rIGHTEYELEFTCORNER;
            this.LEFT_EYEBROW_UPPER_MIDPOINT = lEFTEYEBROWUPPERMIDPOINT;
            this.RIGHT_EYEBROW_UPPER_MIDPOINT = rIGHTEYEBROWUPPERMIDPOINT;
            this.LEFT_EAR_TRAGION = lEFTEARTRAGION;
            this.RIGHT_EAR_TRAGION = rIGHTEARTRAGION;
            this.FOREHEAD_GLABELLA = fOREHEADGLABELLA;
            this.CHIN_GNATHION = cHINGNATHION;
            this.CHIN_LEFT_GONION = cHINLEFTGONION;
            this.CHIN_RIGHT_GONION = cHINRIGHTGONION;
            this.LEFT_CHEEK_CENTER = lEFTCHEEKCENTER;
            this.RIGHT_CHEEK_CENTER = rIGHTCHEEKCENTER;
        }
        
        /// <summary>
        /// Gets or Sets LEFT_EYE
        /// </summary>
        [DataMember(Name="LEFT_EYE", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYE { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYE
        /// </summary>
        [DataMember(Name="RIGHT_EYE", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYE { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_OF_LEFT_EYEBROW
        /// </summary>
        [DataMember(Name="LEFT_OF_LEFT_EYEBROW", EmitDefaultValue=false)]
        public List<decimal?> LEFT_OF_LEFT_EYEBROW { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_OF_LEFT_EYEBROW
        /// </summary>
        [DataMember(Name="RIGHT_OF_LEFT_EYEBROW", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_OF_LEFT_EYEBROW { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_OF_RIGHT_EYEBROW
        /// </summary>
        [DataMember(Name="LEFT_OF_RIGHT_EYEBROW", EmitDefaultValue=false)]
        public List<decimal?> LEFT_OF_RIGHT_EYEBROW { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_OF_RIGHT_EYEBROW
        /// </summary>
        [DataMember(Name="RIGHT_OF_RIGHT_EYEBROW", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_OF_RIGHT_EYEBROW { get; set; }

        /// <summary>
        /// Gets or Sets MIDPOINT_BETWEEN_EYES
        /// </summary>
        [DataMember(Name="MIDPOINT_BETWEEN_EYES", EmitDefaultValue=false)]
        public List<decimal?> MIDPOINT_BETWEEN_EYES { get; set; }

        /// <summary>
        /// Gets or Sets NOSE_TIP
        /// </summary>
        [DataMember(Name="NOSE_TIP", EmitDefaultValue=false)]
        public List<decimal?> NOSE_TIP { get; set; }

        /// <summary>
        /// Gets or Sets UPPER_LIP
        /// </summary>
        [DataMember(Name="UPPER_LIP", EmitDefaultValue=false)]
        public List<decimal?> UPPER_LIP { get; set; }

        /// <summary>
        /// Gets or Sets LOWER_LIP
        /// </summary>
        [DataMember(Name="LOWER_LIP", EmitDefaultValue=false)]
        public List<decimal?> LOWER_LIP { get; set; }

        /// <summary>
        /// Gets or Sets MOUTH_LEFT
        /// </summary>
        [DataMember(Name="MOUTH_LEFT", EmitDefaultValue=false)]
        public List<decimal?> MOUTH_LEFT { get; set; }

        /// <summary>
        /// Gets or Sets MOUTH_RIGHT
        /// </summary>
        [DataMember(Name="MOUTH_RIGHT", EmitDefaultValue=false)]
        public List<decimal?> MOUTH_RIGHT { get; set; }

        /// <summary>
        /// Gets or Sets MOUTH_CENTER
        /// </summary>
        [DataMember(Name="MOUTH_CENTER", EmitDefaultValue=false)]
        public List<decimal?> MOUTH_CENTER { get; set; }

        /// <summary>
        /// Gets or Sets NOSE_BOTTOM_RIGHT
        /// </summary>
        [DataMember(Name="NOSE_BOTTOM_RIGHT", EmitDefaultValue=false)]
        public List<decimal?> NOSE_BOTTOM_RIGHT { get; set; }

        /// <summary>
        /// Gets or Sets NOSE_BOTTOM_LEFT
        /// </summary>
        [DataMember(Name="NOSE_BOTTOM_LEFT", EmitDefaultValue=false)]
        public List<decimal?> NOSE_BOTTOM_LEFT { get; set; }

        /// <summary>
        /// Gets or Sets NOSE_BOTTOM_CENTER
        /// </summary>
        [DataMember(Name="NOSE_BOTTOM_CENTER", EmitDefaultValue=false)]
        public List<decimal?> NOSE_BOTTOM_CENTER { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EYE_TOP_BOUNDARY
        /// </summary>
        [DataMember(Name="LEFT_EYE_TOP_BOUNDARY", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYE_TOP_BOUNDARY { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EYE_RIGHT_CORNER
        /// </summary>
        [DataMember(Name="LEFT_EYE_RIGHT_CORNER", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYE_RIGHT_CORNER { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EYE_BOTTOM_BOUNDARY
        /// </summary>
        [DataMember(Name="LEFT_EYE_BOTTOM_BOUNDARY", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYE_BOTTOM_BOUNDARY { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EYE_LEFT_CORNER
        /// </summary>
        [DataMember(Name="LEFT_EYE_LEFT_CORNER", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYE_LEFT_CORNER { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYE_TOP_BOUNDARY
        /// </summary>
        [DataMember(Name="RIGHT_EYE_TOP_BOUNDARY", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYE_TOP_BOUNDARY { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYE_RIGHT_CORNER
        /// </summary>
        [DataMember(Name="RIGHT_EYE_RIGHT_CORNER", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYE_RIGHT_CORNER { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYE_BOTTOM_BOUNDARY
        /// </summary>
        [DataMember(Name="RIGHT_EYE_BOTTOM_BOUNDARY", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYE_BOTTOM_BOUNDARY { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYE_LEFT_CORNER
        /// </summary>
        [DataMember(Name="RIGHT_EYE_LEFT_CORNER", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYE_LEFT_CORNER { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EYEBROW_UPPER_MIDPOINT
        /// </summary>
        [DataMember(Name="LEFT_EYEBROW_UPPER_MIDPOINT", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EYEBROW_UPPER_MIDPOINT { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EYEBROW_UPPER_MIDPOINT
        /// </summary>
        [DataMember(Name="RIGHT_EYEBROW_UPPER_MIDPOINT", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EYEBROW_UPPER_MIDPOINT { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_EAR_TRAGION
        /// </summary>
        [DataMember(Name="LEFT_EAR_TRAGION", EmitDefaultValue=false)]
        public List<decimal?> LEFT_EAR_TRAGION { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_EAR_TRAGION
        /// </summary>
        [DataMember(Name="RIGHT_EAR_TRAGION", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_EAR_TRAGION { get; set; }

        /// <summary>
        /// Gets or Sets FOREHEAD_GLABELLA
        /// </summary>
        [DataMember(Name="FOREHEAD_GLABELLA", EmitDefaultValue=false)]
        public List<decimal?> FOREHEAD_GLABELLA { get; set; }

        /// <summary>
        /// Gets or Sets CHIN_GNATHION
        /// </summary>
        [DataMember(Name="CHIN_GNATHION", EmitDefaultValue=false)]
        public List<decimal?> CHIN_GNATHION { get; set; }

        /// <summary>
        /// Gets or Sets CHIN_LEFT_GONION
        /// </summary>
        [DataMember(Name="CHIN_LEFT_GONION", EmitDefaultValue=false)]
        public List<decimal?> CHIN_LEFT_GONION { get; set; }

        /// <summary>
        /// Gets or Sets CHIN_RIGHT_GONION
        /// </summary>
        [DataMember(Name="CHIN_RIGHT_GONION", EmitDefaultValue=false)]
        public List<decimal?> CHIN_RIGHT_GONION { get; set; }

        /// <summary>
        /// Gets or Sets LEFT_CHEEK_CENTER
        /// </summary>
        [DataMember(Name="LEFT_CHEEK_CENTER", EmitDefaultValue=false)]
        public List<decimal?> LEFT_CHEEK_CENTER { get; set; }

        /// <summary>
        /// Gets or Sets RIGHT_CHEEK_CENTER
        /// </summary>
        [DataMember(Name="RIGHT_CHEEK_CENTER", EmitDefaultValue=false)]
        public List<decimal?> RIGHT_CHEEK_CENTER { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20010ResultLandmarks {\n");
            sb.Append("  LEFT_EYE: ").Append(LEFT_EYE).Append("\n");
            sb.Append("  RIGHT_EYE: ").Append(RIGHT_EYE).Append("\n");
            sb.Append("  LEFT_OF_LEFT_EYEBROW: ").Append(LEFT_OF_LEFT_EYEBROW).Append("\n");
            sb.Append("  RIGHT_OF_LEFT_EYEBROW: ").Append(RIGHT_OF_LEFT_EYEBROW).Append("\n");
            sb.Append("  LEFT_OF_RIGHT_EYEBROW: ").Append(LEFT_OF_RIGHT_EYEBROW).Append("\n");
            sb.Append("  RIGHT_OF_RIGHT_EYEBROW: ").Append(RIGHT_OF_RIGHT_EYEBROW).Append("\n");
            sb.Append("  MIDPOINT_BETWEEN_EYES: ").Append(MIDPOINT_BETWEEN_EYES).Append("\n");
            sb.Append("  NOSE_TIP: ").Append(NOSE_TIP).Append("\n");
            sb.Append("  UPPER_LIP: ").Append(UPPER_LIP).Append("\n");
            sb.Append("  LOWER_LIP: ").Append(LOWER_LIP).Append("\n");
            sb.Append("  MOUTH_LEFT: ").Append(MOUTH_LEFT).Append("\n");
            sb.Append("  MOUTH_RIGHT: ").Append(MOUTH_RIGHT).Append("\n");
            sb.Append("  MOUTH_CENTER: ").Append(MOUTH_CENTER).Append("\n");
            sb.Append("  NOSE_BOTTOM_RIGHT: ").Append(NOSE_BOTTOM_RIGHT).Append("\n");
            sb.Append("  NOSE_BOTTOM_LEFT: ").Append(NOSE_BOTTOM_LEFT).Append("\n");
            sb.Append("  NOSE_BOTTOM_CENTER: ").Append(NOSE_BOTTOM_CENTER).Append("\n");
            sb.Append("  LEFT_EYE_TOP_BOUNDARY: ").Append(LEFT_EYE_TOP_BOUNDARY).Append("\n");
            sb.Append("  LEFT_EYE_RIGHT_CORNER: ").Append(LEFT_EYE_RIGHT_CORNER).Append("\n");
            sb.Append("  LEFT_EYE_BOTTOM_BOUNDARY: ").Append(LEFT_EYE_BOTTOM_BOUNDARY).Append("\n");
            sb.Append("  LEFT_EYE_LEFT_CORNER: ").Append(LEFT_EYE_LEFT_CORNER).Append("\n");
            sb.Append("  RIGHT_EYE_TOP_BOUNDARY: ").Append(RIGHT_EYE_TOP_BOUNDARY).Append("\n");
            sb.Append("  RIGHT_EYE_RIGHT_CORNER: ").Append(RIGHT_EYE_RIGHT_CORNER).Append("\n");
            sb.Append("  RIGHT_EYE_BOTTOM_BOUNDARY: ").Append(RIGHT_EYE_BOTTOM_BOUNDARY).Append("\n");
            sb.Append("  RIGHT_EYE_LEFT_CORNER: ").Append(RIGHT_EYE_LEFT_CORNER).Append("\n");
            sb.Append("  LEFT_EYEBROW_UPPER_MIDPOINT: ").Append(LEFT_EYEBROW_UPPER_MIDPOINT).Append("\n");
            sb.Append("  RIGHT_EYEBROW_UPPER_MIDPOINT: ").Append(RIGHT_EYEBROW_UPPER_MIDPOINT).Append("\n");
            sb.Append("  LEFT_EAR_TRAGION: ").Append(LEFT_EAR_TRAGION).Append("\n");
            sb.Append("  RIGHT_EAR_TRAGION: ").Append(RIGHT_EAR_TRAGION).Append("\n");
            sb.Append("  FOREHEAD_GLABELLA: ").Append(FOREHEAD_GLABELLA).Append("\n");
            sb.Append("  CHIN_GNATHION: ").Append(CHIN_GNATHION).Append("\n");
            sb.Append("  CHIN_LEFT_GONION: ").Append(CHIN_LEFT_GONION).Append("\n");
            sb.Append("  CHIN_RIGHT_GONION: ").Append(CHIN_RIGHT_GONION).Append("\n");
            sb.Append("  LEFT_CHEEK_CENTER: ").Append(LEFT_CHEEK_CENTER).Append("\n");
            sb.Append("  RIGHT_CHEEK_CENTER: ").Append(RIGHT_CHEEK_CENTER).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse20010ResultLandmarks);
        }

        /// <summary>
        /// Returns true if InlineResponse20010ResultLandmarks instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse20010ResultLandmarks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20010ResultLandmarks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LEFT_EYE == input.LEFT_EYE ||
                    this.LEFT_EYE != null &&
                    this.LEFT_EYE.SequenceEqual(input.LEFT_EYE)
                ) && 
                (
                    this.RIGHT_EYE == input.RIGHT_EYE ||
                    this.RIGHT_EYE != null &&
                    this.RIGHT_EYE.SequenceEqual(input.RIGHT_EYE)
                ) && 
                (
                    this.LEFT_OF_LEFT_EYEBROW == input.LEFT_OF_LEFT_EYEBROW ||
                    this.LEFT_OF_LEFT_EYEBROW != null &&
                    this.LEFT_OF_LEFT_EYEBROW.SequenceEqual(input.LEFT_OF_LEFT_EYEBROW)
                ) && 
                (
                    this.RIGHT_OF_LEFT_EYEBROW == input.RIGHT_OF_LEFT_EYEBROW ||
                    this.RIGHT_OF_LEFT_EYEBROW != null &&
                    this.RIGHT_OF_LEFT_EYEBROW.SequenceEqual(input.RIGHT_OF_LEFT_EYEBROW)
                ) && 
                (
                    this.LEFT_OF_RIGHT_EYEBROW == input.LEFT_OF_RIGHT_EYEBROW ||
                    this.LEFT_OF_RIGHT_EYEBROW != null &&
                    this.LEFT_OF_RIGHT_EYEBROW.SequenceEqual(input.LEFT_OF_RIGHT_EYEBROW)
                ) && 
                (
                    this.RIGHT_OF_RIGHT_EYEBROW == input.RIGHT_OF_RIGHT_EYEBROW ||
                    this.RIGHT_OF_RIGHT_EYEBROW != null &&
                    this.RIGHT_OF_RIGHT_EYEBROW.SequenceEqual(input.RIGHT_OF_RIGHT_EYEBROW)
                ) && 
                (
                    this.MIDPOINT_BETWEEN_EYES == input.MIDPOINT_BETWEEN_EYES ||
                    this.MIDPOINT_BETWEEN_EYES != null &&
                    this.MIDPOINT_BETWEEN_EYES.SequenceEqual(input.MIDPOINT_BETWEEN_EYES)
                ) && 
                (
                    this.NOSE_TIP == input.NOSE_TIP ||
                    this.NOSE_TIP != null &&
                    this.NOSE_TIP.SequenceEqual(input.NOSE_TIP)
                ) && 
                (
                    this.UPPER_LIP == input.UPPER_LIP ||
                    this.UPPER_LIP != null &&
                    this.UPPER_LIP.SequenceEqual(input.UPPER_LIP)
                ) && 
                (
                    this.LOWER_LIP == input.LOWER_LIP ||
                    this.LOWER_LIP != null &&
                    this.LOWER_LIP.SequenceEqual(input.LOWER_LIP)
                ) && 
                (
                    this.MOUTH_LEFT == input.MOUTH_LEFT ||
                    this.MOUTH_LEFT != null &&
                    this.MOUTH_LEFT.SequenceEqual(input.MOUTH_LEFT)
                ) && 
                (
                    this.MOUTH_RIGHT == input.MOUTH_RIGHT ||
                    this.MOUTH_RIGHT != null &&
                    this.MOUTH_RIGHT.SequenceEqual(input.MOUTH_RIGHT)
                ) && 
                (
                    this.MOUTH_CENTER == input.MOUTH_CENTER ||
                    this.MOUTH_CENTER != null &&
                    this.MOUTH_CENTER.SequenceEqual(input.MOUTH_CENTER)
                ) && 
                (
                    this.NOSE_BOTTOM_RIGHT == input.NOSE_BOTTOM_RIGHT ||
                    this.NOSE_BOTTOM_RIGHT != null &&
                    this.NOSE_BOTTOM_RIGHT.SequenceEqual(input.NOSE_BOTTOM_RIGHT)
                ) && 
                (
                    this.NOSE_BOTTOM_LEFT == input.NOSE_BOTTOM_LEFT ||
                    this.NOSE_BOTTOM_LEFT != null &&
                    this.NOSE_BOTTOM_LEFT.SequenceEqual(input.NOSE_BOTTOM_LEFT)
                ) && 
                (
                    this.NOSE_BOTTOM_CENTER == input.NOSE_BOTTOM_CENTER ||
                    this.NOSE_BOTTOM_CENTER != null &&
                    this.NOSE_BOTTOM_CENTER.SequenceEqual(input.NOSE_BOTTOM_CENTER)
                ) && 
                (
                    this.LEFT_EYE_TOP_BOUNDARY == input.LEFT_EYE_TOP_BOUNDARY ||
                    this.LEFT_EYE_TOP_BOUNDARY != null &&
                    this.LEFT_EYE_TOP_BOUNDARY.SequenceEqual(input.LEFT_EYE_TOP_BOUNDARY)
                ) && 
                (
                    this.LEFT_EYE_RIGHT_CORNER == input.LEFT_EYE_RIGHT_CORNER ||
                    this.LEFT_EYE_RIGHT_CORNER != null &&
                    this.LEFT_EYE_RIGHT_CORNER.SequenceEqual(input.LEFT_EYE_RIGHT_CORNER)
                ) && 
                (
                    this.LEFT_EYE_BOTTOM_BOUNDARY == input.LEFT_EYE_BOTTOM_BOUNDARY ||
                    this.LEFT_EYE_BOTTOM_BOUNDARY != null &&
                    this.LEFT_EYE_BOTTOM_BOUNDARY.SequenceEqual(input.LEFT_EYE_BOTTOM_BOUNDARY)
                ) && 
                (
                    this.LEFT_EYE_LEFT_CORNER == input.LEFT_EYE_LEFT_CORNER ||
                    this.LEFT_EYE_LEFT_CORNER != null &&
                    this.LEFT_EYE_LEFT_CORNER.SequenceEqual(input.LEFT_EYE_LEFT_CORNER)
                ) && 
                (
                    this.RIGHT_EYE_TOP_BOUNDARY == input.RIGHT_EYE_TOP_BOUNDARY ||
                    this.RIGHT_EYE_TOP_BOUNDARY != null &&
                    this.RIGHT_EYE_TOP_BOUNDARY.SequenceEqual(input.RIGHT_EYE_TOP_BOUNDARY)
                ) && 
                (
                    this.RIGHT_EYE_RIGHT_CORNER == input.RIGHT_EYE_RIGHT_CORNER ||
                    this.RIGHT_EYE_RIGHT_CORNER != null &&
                    this.RIGHT_EYE_RIGHT_CORNER.SequenceEqual(input.RIGHT_EYE_RIGHT_CORNER)
                ) && 
                (
                    this.RIGHT_EYE_BOTTOM_BOUNDARY == input.RIGHT_EYE_BOTTOM_BOUNDARY ||
                    this.RIGHT_EYE_BOTTOM_BOUNDARY != null &&
                    this.RIGHT_EYE_BOTTOM_BOUNDARY.SequenceEqual(input.RIGHT_EYE_BOTTOM_BOUNDARY)
                ) && 
                (
                    this.RIGHT_EYE_LEFT_CORNER == input.RIGHT_EYE_LEFT_CORNER ||
                    this.RIGHT_EYE_LEFT_CORNER != null &&
                    this.RIGHT_EYE_LEFT_CORNER.SequenceEqual(input.RIGHT_EYE_LEFT_CORNER)
                ) && 
                (
                    this.LEFT_EYEBROW_UPPER_MIDPOINT == input.LEFT_EYEBROW_UPPER_MIDPOINT ||
                    this.LEFT_EYEBROW_UPPER_MIDPOINT != null &&
                    this.LEFT_EYEBROW_UPPER_MIDPOINT.SequenceEqual(input.LEFT_EYEBROW_UPPER_MIDPOINT)
                ) && 
                (
                    this.RIGHT_EYEBROW_UPPER_MIDPOINT == input.RIGHT_EYEBROW_UPPER_MIDPOINT ||
                    this.RIGHT_EYEBROW_UPPER_MIDPOINT != null &&
                    this.RIGHT_EYEBROW_UPPER_MIDPOINT.SequenceEqual(input.RIGHT_EYEBROW_UPPER_MIDPOINT)
                ) && 
                (
                    this.LEFT_EAR_TRAGION == input.LEFT_EAR_TRAGION ||
                    this.LEFT_EAR_TRAGION != null &&
                    this.LEFT_EAR_TRAGION.SequenceEqual(input.LEFT_EAR_TRAGION)
                ) && 
                (
                    this.RIGHT_EAR_TRAGION == input.RIGHT_EAR_TRAGION ||
                    this.RIGHT_EAR_TRAGION != null &&
                    this.RIGHT_EAR_TRAGION.SequenceEqual(input.RIGHT_EAR_TRAGION)
                ) && 
                (
                    this.FOREHEAD_GLABELLA == input.FOREHEAD_GLABELLA ||
                    this.FOREHEAD_GLABELLA != null &&
                    this.FOREHEAD_GLABELLA.SequenceEqual(input.FOREHEAD_GLABELLA)
                ) && 
                (
                    this.CHIN_GNATHION == input.CHIN_GNATHION ||
                    this.CHIN_GNATHION != null &&
                    this.CHIN_GNATHION.SequenceEqual(input.CHIN_GNATHION)
                ) && 
                (
                    this.CHIN_LEFT_GONION == input.CHIN_LEFT_GONION ||
                    this.CHIN_LEFT_GONION != null &&
                    this.CHIN_LEFT_GONION.SequenceEqual(input.CHIN_LEFT_GONION)
                ) && 
                (
                    this.CHIN_RIGHT_GONION == input.CHIN_RIGHT_GONION ||
                    this.CHIN_RIGHT_GONION != null &&
                    this.CHIN_RIGHT_GONION.SequenceEqual(input.CHIN_RIGHT_GONION)
                ) && 
                (
                    this.LEFT_CHEEK_CENTER == input.LEFT_CHEEK_CENTER ||
                    this.LEFT_CHEEK_CENTER != null &&
                    this.LEFT_CHEEK_CENTER.SequenceEqual(input.LEFT_CHEEK_CENTER)
                ) && 
                (
                    this.RIGHT_CHEEK_CENTER == input.RIGHT_CHEEK_CENTER ||
                    this.RIGHT_CHEEK_CENTER != null &&
                    this.RIGHT_CHEEK_CENTER.SequenceEqual(input.RIGHT_CHEEK_CENTER)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LEFT_EYE != null)
                    hashCode = hashCode * 59 + this.LEFT_EYE.GetHashCode();
                if (this.RIGHT_EYE != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYE.GetHashCode();
                if (this.LEFT_OF_LEFT_EYEBROW != null)
                    hashCode = hashCode * 59 + this.LEFT_OF_LEFT_EYEBROW.GetHashCode();
                if (this.RIGHT_OF_LEFT_EYEBROW != null)
                    hashCode = hashCode * 59 + this.RIGHT_OF_LEFT_EYEBROW.GetHashCode();
                if (this.LEFT_OF_RIGHT_EYEBROW != null)
                    hashCode = hashCode * 59 + this.LEFT_OF_RIGHT_EYEBROW.GetHashCode();
                if (this.RIGHT_OF_RIGHT_EYEBROW != null)
                    hashCode = hashCode * 59 + this.RIGHT_OF_RIGHT_EYEBROW.GetHashCode();
                if (this.MIDPOINT_BETWEEN_EYES != null)
                    hashCode = hashCode * 59 + this.MIDPOINT_BETWEEN_EYES.GetHashCode();
                if (this.NOSE_TIP != null)
                    hashCode = hashCode * 59 + this.NOSE_TIP.GetHashCode();
                if (this.UPPER_LIP != null)
                    hashCode = hashCode * 59 + this.UPPER_LIP.GetHashCode();
                if (this.LOWER_LIP != null)
                    hashCode = hashCode * 59 + this.LOWER_LIP.GetHashCode();
                if (this.MOUTH_LEFT != null)
                    hashCode = hashCode * 59 + this.MOUTH_LEFT.GetHashCode();
                if (this.MOUTH_RIGHT != null)
                    hashCode = hashCode * 59 + this.MOUTH_RIGHT.GetHashCode();
                if (this.MOUTH_CENTER != null)
                    hashCode = hashCode * 59 + this.MOUTH_CENTER.GetHashCode();
                if (this.NOSE_BOTTOM_RIGHT != null)
                    hashCode = hashCode * 59 + this.NOSE_BOTTOM_RIGHT.GetHashCode();
                if (this.NOSE_BOTTOM_LEFT != null)
                    hashCode = hashCode * 59 + this.NOSE_BOTTOM_LEFT.GetHashCode();
                if (this.NOSE_BOTTOM_CENTER != null)
                    hashCode = hashCode * 59 + this.NOSE_BOTTOM_CENTER.GetHashCode();
                if (this.LEFT_EYE_TOP_BOUNDARY != null)
                    hashCode = hashCode * 59 + this.LEFT_EYE_TOP_BOUNDARY.GetHashCode();
                if (this.LEFT_EYE_RIGHT_CORNER != null)
                    hashCode = hashCode * 59 + this.LEFT_EYE_RIGHT_CORNER.GetHashCode();
                if (this.LEFT_EYE_BOTTOM_BOUNDARY != null)
                    hashCode = hashCode * 59 + this.LEFT_EYE_BOTTOM_BOUNDARY.GetHashCode();
                if (this.LEFT_EYE_LEFT_CORNER != null)
                    hashCode = hashCode * 59 + this.LEFT_EYE_LEFT_CORNER.GetHashCode();
                if (this.RIGHT_EYE_TOP_BOUNDARY != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYE_TOP_BOUNDARY.GetHashCode();
                if (this.RIGHT_EYE_RIGHT_CORNER != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYE_RIGHT_CORNER.GetHashCode();
                if (this.RIGHT_EYE_BOTTOM_BOUNDARY != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYE_BOTTOM_BOUNDARY.GetHashCode();
                if (this.RIGHT_EYE_LEFT_CORNER != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYE_LEFT_CORNER.GetHashCode();
                if (this.LEFT_EYEBROW_UPPER_MIDPOINT != null)
                    hashCode = hashCode * 59 + this.LEFT_EYEBROW_UPPER_MIDPOINT.GetHashCode();
                if (this.RIGHT_EYEBROW_UPPER_MIDPOINT != null)
                    hashCode = hashCode * 59 + this.RIGHT_EYEBROW_UPPER_MIDPOINT.GetHashCode();
                if (this.LEFT_EAR_TRAGION != null)
                    hashCode = hashCode * 59 + this.LEFT_EAR_TRAGION.GetHashCode();
                if (this.RIGHT_EAR_TRAGION != null)
                    hashCode = hashCode * 59 + this.RIGHT_EAR_TRAGION.GetHashCode();
                if (this.FOREHEAD_GLABELLA != null)
                    hashCode = hashCode * 59 + this.FOREHEAD_GLABELLA.GetHashCode();
                if (this.CHIN_GNATHION != null)
                    hashCode = hashCode * 59 + this.CHIN_GNATHION.GetHashCode();
                if (this.CHIN_LEFT_GONION != null)
                    hashCode = hashCode * 59 + this.CHIN_LEFT_GONION.GetHashCode();
                if (this.CHIN_RIGHT_GONION != null)
                    hashCode = hashCode * 59 + this.CHIN_RIGHT_GONION.GetHashCode();
                if (this.LEFT_CHEEK_CENTER != null)
                    hashCode = hashCode * 59 + this.LEFT_CHEEK_CENTER.GetHashCode();
                if (this.RIGHT_CHEEK_CENTER != null)
                    hashCode = hashCode * 59 + this.RIGHT_CHEEK_CENTER.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
