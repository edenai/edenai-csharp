/* 
 * Eden AI API Documentation
 *
 * <a href=\"https://app.edenai.run/user/login\" target=\"_blank\"><img src=\"/static/images/welcome.png\"></a>. # Welcome  Eden AI simplifies the use and integration of AI technologies by providing a unique API connected to the best AI engines and combined with a powerful management platform. The platform covers a wide range of AI technologies: * Vision:  <a href=\"https://www.edenai.co/vision\" target=\"_blank\">www.edenai.co/vision</a>. * Text & NLP: <a href=\"https://www.edenai.co/text\" target=\"_blank\">www.edenai.co/text</a>. * Speech & Audio: <a href=\"https://www.edenai.co/speech\" target=\"_blank\">www.edenai.co/speech</a>. * OCR: <a href=\"https://www.edenai.co/ocr\" target=\"_blank\">www.edenai.co/ocr</a>. * Machine Translation: <a href=\"https://www.edenai.co/translation\" target=\"_blank\">www.edenai.co/translation</a>. * Prediction: <a href=\"https://www.edenai.co/prediction\" target=\"_blank\">www.edenai.co/prediction</a>.  For all the proposed technologies, we provide a single endpoint:  the service provider is only a parameter that can be changed very easily. All the engines available on Eden AI are listed here: www.edenai.co/catalog  # Support & community  ### 1- Support If you have any problems, please contact us at this email address: contact@edenai.co. We will be happy to help you in the use of Eden AI.   ### 2- Community  You can interact personally with other people actively using and working with Eden AI and join our  <a href=\"https://join.slack.com/t/edenai/shared_invite/zt-t68c2pr9-4lDKQ_qEqmLiWNptQzB_6w\" target=\"_blank\">Slack community</a>.  We are always updating our docs, so a good way to always stay up to date is to watch our documentation repo on Github: <a href=\"https://github.com/edenai\" target=\"_blank\">https://github.com/edenai</a>.  ### 3- Blog  We also regularly publish various articles with Eden AI news and technical articles on the different AI engines that exist. You can find these articles here: <a href=\"https://www.edenai.co/blog\" target=\"_blank\">https://www.edenai.co/blog</a>.   # Authentication  ## Create account ![Register](/static/images/register.png)  To create an account, please go to this link: <a href=\"https://app.edenai.run/user/login\" target=\"_blank\">app.edenai.run/user/login</a>. You can create an account with your email address or by using your account on available platforms (Gmail, Github, etc.).   By creating an account with your email address, you will receive a confirmation email with a link to click. Check your spam if needed and contact us if you have any problem: contact@edenai.co  ![Login](/static/images/login.png) ## API key  By going to your account page on the platform: <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">https://app.edenai.run/admin/account</a>, you will have access to your API key to start using the different AI engines offered by Eden AI.   ![api_key](/static/images/api_key.png) # Portal Guide  Eden AI provides a web portal that allows you to do several tasks:  ![portal](/static/images/portal.png)  ### 1- Benchmark and test The platform allows you to easily compare competing engines without having to code. By uploading your data, you have access to the prediction results of the different engines. This gives you a first overview of the performance of AI engines.   ![benchmark](/static/images/benchmark.png)  ### 2- Cost management The <a href=\"https://app.edenai.run/admin/cost-management\" target=\"_blank\">cost management page</a> also allows you to centralize the costs associated with the different engines with various filters to simplify the analysis.   This page also allows you to define monthly budget limits not to be exceeded to secure the use of different AI engines.   ![cost-management](/static/images/cost_management.png) ### 3- Account The <a href=\"https://app.edenai.run/admin/account\" target=\"_blank\">account page</a> allows you to change your information and password. It also gives you access to your API key that you can renew if needed.   This page also allows you to add a credit card and to buy with credits to use all the engines offered by Eden AI.   ![account](/static/images/account.png)   # API Guide  Eden AI API has different endpoints that refer to different AI services. The connected providers are thus parameters that the user can easily change. 
 *
 * OpenAPI spec version: v1
 * Contact: contact@edenai.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using EdenAI.Api;
using EdenAI.Model;
using EdenAI.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace EdenAI.Test
{
    /// <summary>
    ///  Class for testing InlineResponse20010ResultLandmarks
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class InlineResponse20010ResultLandmarksTests
    {
        // TODO uncomment below to declare an instance variable for InlineResponse20010ResultLandmarks
        //private InlineResponse20010ResultLandmarks instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of InlineResponse20010ResultLandmarks
            //instance = new InlineResponse20010ResultLandmarks();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InlineResponse20010ResultLandmarks
        /// </summary>
        [Test]
        public void InlineResponse20010ResultLandmarksInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" InlineResponse20010ResultLandmarks
            //Assert.IsInstanceOfType<InlineResponse20010ResultLandmarks> (instance, "variable 'instance' is a InlineResponse20010ResultLandmarks");
        }


        /// <summary>
        /// Test the property 'LEFT_EYE'
        /// </summary>
        [Test]
        public void LEFT_EYETest()
        {
            // TODO unit test for the property 'LEFT_EYE'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYE'
        /// </summary>
        [Test]
        public void RIGHT_EYETest()
        {
            // TODO unit test for the property 'RIGHT_EYE'
        }
        /// <summary>
        /// Test the property 'LEFT_OF_LEFT_EYEBROW'
        /// </summary>
        [Test]
        public void LEFT_OF_LEFT_EYEBROWTest()
        {
            // TODO unit test for the property 'LEFT_OF_LEFT_EYEBROW'
        }
        /// <summary>
        /// Test the property 'RIGHT_OF_LEFT_EYEBROW'
        /// </summary>
        [Test]
        public void RIGHT_OF_LEFT_EYEBROWTest()
        {
            // TODO unit test for the property 'RIGHT_OF_LEFT_EYEBROW'
        }
        /// <summary>
        /// Test the property 'LEFT_OF_RIGHT_EYEBROW'
        /// </summary>
        [Test]
        public void LEFT_OF_RIGHT_EYEBROWTest()
        {
            // TODO unit test for the property 'LEFT_OF_RIGHT_EYEBROW'
        }
        /// <summary>
        /// Test the property 'RIGHT_OF_RIGHT_EYEBROW'
        /// </summary>
        [Test]
        public void RIGHT_OF_RIGHT_EYEBROWTest()
        {
            // TODO unit test for the property 'RIGHT_OF_RIGHT_EYEBROW'
        }
        /// <summary>
        /// Test the property 'MIDPOINT_BETWEEN_EYES'
        /// </summary>
        [Test]
        public void MIDPOINT_BETWEEN_EYESTest()
        {
            // TODO unit test for the property 'MIDPOINT_BETWEEN_EYES'
        }
        /// <summary>
        /// Test the property 'NOSE_TIP'
        /// </summary>
        [Test]
        public void NOSE_TIPTest()
        {
            // TODO unit test for the property 'NOSE_TIP'
        }
        /// <summary>
        /// Test the property 'UPPER_LIP'
        /// </summary>
        [Test]
        public void UPPER_LIPTest()
        {
            // TODO unit test for the property 'UPPER_LIP'
        }
        /// <summary>
        /// Test the property 'LOWER_LIP'
        /// </summary>
        [Test]
        public void LOWER_LIPTest()
        {
            // TODO unit test for the property 'LOWER_LIP'
        }
        /// <summary>
        /// Test the property 'MOUTH_LEFT'
        /// </summary>
        [Test]
        public void MOUTH_LEFTTest()
        {
            // TODO unit test for the property 'MOUTH_LEFT'
        }
        /// <summary>
        /// Test the property 'MOUTH_RIGHT'
        /// </summary>
        [Test]
        public void MOUTH_RIGHTTest()
        {
            // TODO unit test for the property 'MOUTH_RIGHT'
        }
        /// <summary>
        /// Test the property 'MOUTH_CENTER'
        /// </summary>
        [Test]
        public void MOUTH_CENTERTest()
        {
            // TODO unit test for the property 'MOUTH_CENTER'
        }
        /// <summary>
        /// Test the property 'NOSE_BOTTOM_RIGHT'
        /// </summary>
        [Test]
        public void NOSE_BOTTOM_RIGHTTest()
        {
            // TODO unit test for the property 'NOSE_BOTTOM_RIGHT'
        }
        /// <summary>
        /// Test the property 'NOSE_BOTTOM_LEFT'
        /// </summary>
        [Test]
        public void NOSE_BOTTOM_LEFTTest()
        {
            // TODO unit test for the property 'NOSE_BOTTOM_LEFT'
        }
        /// <summary>
        /// Test the property 'NOSE_BOTTOM_CENTER'
        /// </summary>
        [Test]
        public void NOSE_BOTTOM_CENTERTest()
        {
            // TODO unit test for the property 'NOSE_BOTTOM_CENTER'
        }
        /// <summary>
        /// Test the property 'LEFT_EYE_TOP_BOUNDARY'
        /// </summary>
        [Test]
        public void LEFT_EYE_TOP_BOUNDARYTest()
        {
            // TODO unit test for the property 'LEFT_EYE_TOP_BOUNDARY'
        }
        /// <summary>
        /// Test the property 'LEFT_EYE_RIGHT_CORNER'
        /// </summary>
        [Test]
        public void LEFT_EYE_RIGHT_CORNERTest()
        {
            // TODO unit test for the property 'LEFT_EYE_RIGHT_CORNER'
        }
        /// <summary>
        /// Test the property 'LEFT_EYE_BOTTOM_BOUNDARY'
        /// </summary>
        [Test]
        public void LEFT_EYE_BOTTOM_BOUNDARYTest()
        {
            // TODO unit test for the property 'LEFT_EYE_BOTTOM_BOUNDARY'
        }
        /// <summary>
        /// Test the property 'LEFT_EYE_LEFT_CORNER'
        /// </summary>
        [Test]
        public void LEFT_EYE_LEFT_CORNERTest()
        {
            // TODO unit test for the property 'LEFT_EYE_LEFT_CORNER'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYE_TOP_BOUNDARY'
        /// </summary>
        [Test]
        public void RIGHT_EYE_TOP_BOUNDARYTest()
        {
            // TODO unit test for the property 'RIGHT_EYE_TOP_BOUNDARY'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYE_RIGHT_CORNER'
        /// </summary>
        [Test]
        public void RIGHT_EYE_RIGHT_CORNERTest()
        {
            // TODO unit test for the property 'RIGHT_EYE_RIGHT_CORNER'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYE_BOTTOM_BOUNDARY'
        /// </summary>
        [Test]
        public void RIGHT_EYE_BOTTOM_BOUNDARYTest()
        {
            // TODO unit test for the property 'RIGHT_EYE_BOTTOM_BOUNDARY'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYE_LEFT_CORNER'
        /// </summary>
        [Test]
        public void RIGHT_EYE_LEFT_CORNERTest()
        {
            // TODO unit test for the property 'RIGHT_EYE_LEFT_CORNER'
        }
        /// <summary>
        /// Test the property 'LEFT_EYEBROW_UPPER_MIDPOINT'
        /// </summary>
        [Test]
        public void LEFT_EYEBROW_UPPER_MIDPOINTTest()
        {
            // TODO unit test for the property 'LEFT_EYEBROW_UPPER_MIDPOINT'
        }
        /// <summary>
        /// Test the property 'RIGHT_EYEBROW_UPPER_MIDPOINT'
        /// </summary>
        [Test]
        public void RIGHT_EYEBROW_UPPER_MIDPOINTTest()
        {
            // TODO unit test for the property 'RIGHT_EYEBROW_UPPER_MIDPOINT'
        }
        /// <summary>
        /// Test the property 'LEFT_EAR_TRAGION'
        /// </summary>
        [Test]
        public void LEFT_EAR_TRAGIONTest()
        {
            // TODO unit test for the property 'LEFT_EAR_TRAGION'
        }
        /// <summary>
        /// Test the property 'RIGHT_EAR_TRAGION'
        /// </summary>
        [Test]
        public void RIGHT_EAR_TRAGIONTest()
        {
            // TODO unit test for the property 'RIGHT_EAR_TRAGION'
        }
        /// <summary>
        /// Test the property 'FOREHEAD_GLABELLA'
        /// </summary>
        [Test]
        public void FOREHEAD_GLABELLATest()
        {
            // TODO unit test for the property 'FOREHEAD_GLABELLA'
        }
        /// <summary>
        /// Test the property 'CHIN_GNATHION'
        /// </summary>
        [Test]
        public void CHIN_GNATHIONTest()
        {
            // TODO unit test for the property 'CHIN_GNATHION'
        }
        /// <summary>
        /// Test the property 'CHIN_LEFT_GONION'
        /// </summary>
        [Test]
        public void CHIN_LEFT_GONIONTest()
        {
            // TODO unit test for the property 'CHIN_LEFT_GONION'
        }
        /// <summary>
        /// Test the property 'CHIN_RIGHT_GONION'
        /// </summary>
        [Test]
        public void CHIN_RIGHT_GONIONTest()
        {
            // TODO unit test for the property 'CHIN_RIGHT_GONION'
        }
        /// <summary>
        /// Test the property 'LEFT_CHEEK_CENTER'
        /// </summary>
        [Test]
        public void LEFT_CHEEK_CENTERTest()
        {
            // TODO unit test for the property 'LEFT_CHEEK_CENTER'
        }
        /// <summary>
        /// Test the property 'RIGHT_CHEEK_CENTER'
        /// </summary>
        [Test]
        public void RIGHT_CHEEK_CENTERTest()
        {
            // TODO unit test for the property 'RIGHT_CHEEK_CENTER'
        }

    }

}
